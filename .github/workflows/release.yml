name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on tags like v2025-01-21, v1.0.0, etc.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BFF: ${{ github.repository }}/bff
  IMAGE_NAME_WEBAPI: ${{ github.repository }}/webapi

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for BFF
        id: meta-bff
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BFF }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest

      - name: Extract metadata for WebAPI
        id: meta-webapi
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEBAPI }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push BFF image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/BFF/Dockerfile
          push: true
          tags: ${{ steps.meta-bff.outputs.tags }}
          labels: ${{ steps.meta-bff.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push WebAPI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./src/WebAPI/Dockerfile
          push: true
          tags: ${{ steps.meta-webapi.outputs.tags }}
          labels: ${{ steps.meta-webapi.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Aspire CLI
        run: dotnet tool install -g aspire.cli --prerelease

      - name: Generate docker-compose with Aspire CLI
        run: |
          cd src/Aspire/AppHost
          
          # Generate docker-compose using Aspire CLI
          aspire publish --output-path ../../../deployment-output
            
          # Copy generated files and update image references
          cd ../../../
          cp deployment-output/docker-compose.yaml docker-compose.prod.yml
          cp deployment-output/.env .env.generated
          
          # Replace environment variable placeholders with actual registry images in the env file
          sed -i "s|WEBAPI_IMAGE=webapi:latest|WEBAPI_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEBAPI }}:${{ github.ref_name }}|g" .env.generated
          sed -i "s|BFF_IMAGE=bff:latest|BFF_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BFF }}:${{ github.ref_name }}|g" .env.generated
          
          # Update the volumes path in docker-compose for production deployment
          sed -i 's|/Users/selmir/workspace/claimly/code/Claimly.BFF/src/Aspire/AppHost/Realms|./keycloak/realms|g' docker-compose.prod.yml
          
          # Add production optimizations
          # Update expose to ports for external access
          sed -i 's|expose:|ports:|g' docker-compose.prod.yml
          
          # Add restart policies for production
          sed -i '/networks:/i\    restart: "unless-stopped"' docker-compose.prod.yml

      - name: Create production .env template
        run: |
          cat > .env.production << EOF
          # Production Environment Configuration
          # Copy this file to .env and fill in the values
          
          # Database Configuration
          POSTGRES_PASSWORD=your_secure_postgres_password_here
          
          # Keycloak Configuration  
          KEYCLOAK_PASSWORD=your_secure_keycloak_admin_password_here
          
          # Generated for tag: ${GITHUB_REF_NAME}
          # Images used:
          # - BFF: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BFF }}:${GITHUB_REF_NAME}
          # - WebAPI: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEBAPI }}:${GITHUB_REF_NAME}
          EOF

      - name: Create deployment package
        run: |
          mkdir -p deployment-package
          cp docker-compose.prod.yml deployment-package/docker-compose.yml
          cp .env.production deployment-package/.env.template
          cp .env.generated deployment-package/.env.example
          
          # Copy Keycloak realm configuration if it exists
          if [ -d "src/Aspire/AppHost/Realms" ]; then
            mkdir -p deployment-package/keycloak
            cp -r src/Aspire/AppHost/Realms deployment-package/keycloak/realms
          fi
          
          # Create deployment instructions
          cat > deployment-package/README.md << EOF
          # Deployment Package for ${GITHUB_REF_NAME}
          
          This package contains everything needed to deploy your application using Docker Compose.
          
          ## Quick Start
          
          1. Copy \`.env.template\` to \`.env\` and configure your passwords
          2. Run: \`docker-compose up -d\`
          3. Access your application at http://localhost:5000
          
          ## Services
          
          - **Application (BFF)**: http://localhost:5000
          - **API**: http://localhost:5001  
          - **Keycloak Admin**: http://localhost:8080 (admin/[KEYCLOAK_PASSWORD])
          - **Mailpit**: http://localhost:8025
          - **Aspire Dashboard**: http://localhost:18888
          - **PostgreSQL**: localhost:5432
          
          ## Images Used
          
          - BFF: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BFF }}:${GITHUB_REF_NAME}\`
          - WebAPI: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEBAPI }}:${GITHUB_REF_NAME}\`
          
          ## Prerequisites
          
          - Docker and Docker Compose installed
          - Configured \`.env\` file with secure passwords
          
          ## Commands
          
          \`\`\`bash
          # Start all services
          docker-compose up -d
          
          # View logs
          docker-compose logs -f
          
          # Stop all services
          docker-compose down
          
          # Stop and remove volumes (CAUTION: This will delete all data)
          docker-compose down -v
          \`\`\`
          EOF
          
          # Create a zip file of the deployment package
          cd deployment-package
          zip -r "../deployment-${GITHUB_REF_NAME}.zip" .
          cd ..

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            deployment-${{ github.ref_name }}.zip
            deployment-package/docker-compose.yml
            deployment-package/.env.template
            deployment-package/.env.example
          body: |
            ## Release ${{ github.ref_name }}
            
            This release includes:
            
            ### Docker Images Published
            - **BFF**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BFF }}:${{ github.ref_name }}`
            - **WebAPI**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEBAPI }}:${{ github.ref_name }}`
            
            ### Deployment Package
            Download `deployment-${{ github.ref_name }}.zip` for a complete deployment package including:
            - Production-ready `docker-compose.yml`
            - Environment template (`.env.template`)
            - Deployment instructions
            - Keycloak realm configuration
            
            ### Quick Deploy
            ```bash
            # Download and extract the deployment package
            wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/deployment-${{ github.ref_name }}.zip
            unzip deployment-${{ github.ref_name }}.zip
            cd deployment-package
            
            # Configure environment
            cp .env.template .env
            # Edit .env with your secure passwords
            
            # Deploy
            docker-compose up -d
            ```
            
            ### Access Points
            - **Application**: http://localhost:5000
            - **API**: http://localhost:5001
            - **Keycloak**: http://localhost:8080
            - **Mailpit**: http://localhost:8025
            - **Aspire Dashboard**: http://localhost:18888
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}