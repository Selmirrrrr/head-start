@using HeadStart.Client.Generated
@using HeadStart.Client.Generated.Models
@using HeadStart.Client.Services.Users
@inject IStringLocalizer<TenantSelector> L

<MudStack Class="flex-grow-1" Row="true" AlignItems="AlignItems.Center" Spacing="2" Justify="Justify.SpaceBetween">
    <MudIcon Class="ml-4 mr-2"
                 Color="Color.Primary"
                 Icon="@Icons.Custom.Brands.MudBlazor"
                 Size="Size.Large" />
    <MudMenu AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.BottomRight" LockScroll="true" Class="flex-grow-1" Disabled="!HasSwitchPermission">
        <ActivatorContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="flex-grow-1">
                <MudStack Spacing="0">
                    <MudText Typo="Typo.h6">
                        @L[AppSettings.AppName]
                    </MudText>
                    <MudText Typo="Typo.subtitle1" Class="mud-secondary-text">
                        @(UserState.DernierTenantSelectionne ?? "No Organization")
                    </MudText>
                </MudStack>
                <MudIcon Icon="@Icons.Material.Outlined.KeyboardDoubleArrowDown" Size="Size.Small" Class="mr-4" />
            </MudStack>
        </ActivatorContent>
        <ChildContent>
            <div style="min-width: 200px;">
                <div class="mx-4 mt-2 mb-3">
                    <MudText Typo="Typo.body2" Class="mud-secondary-text">
                        @L["Switch Organization"]
                    </MudText>
                </div>
                <MudDivider Class="my-2" />

                @if (_availableTenants != null)
                {
                    if(_availableTenants.Count == 0)
                    {
                        <MudMenuItem Disabled="true">
                            <div class="d-flex align-center">
                                <MudText>@L["No available organization"]</MudText>
                            </div>
                        </MudMenuItem>
                    }
                    @foreach (var tenant in _availableTenants)
                    {
                        <MudMenuItem OnClick="() => SwitchToTenant(tenant.Id)" Disabled="@(_isSwitching)">
                            <div class="d-flex align-center">
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.body2">
                                        @tenant.Name
                                    </MudText>

                                    <MudText Typo="Typo.caption" Class="mud-secondary-text">
                                        @tenant.Name
                                    </MudText>

                                </MudStack>
                                @if (tenant.Id == UserState.DernierTenantSelectionne)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Check" Class="ml-2" Color="Color.Primary" />
                                }
                            </div>
                        </MudMenuItem>
                    }
                }
                else
                {
                    <MudMenuItem Disabled="true">
                        <div class="d-flex align-center">
                            <MudText>@L["Loading organizations..."]</MudText>
                        </div>
                    </MudMenuItem>
                }
            </div>
        </ChildContent>
    </MudMenu>
</MudStack>


@code
{
    [Inject]
    private ApiClientV1 Apiclient { get; set; } = null!;

    [CascadingParameter] public UserStateContainer UserStateContainer { get; set; } = null!;

    private List<HeadStartWebAPIFeaturesPlatformAdminTenantsTenantsGetList_TenantViewModel>? _availableTenants;
    private UserState UserState => UserStateContainer.CurrentState;
    private bool _isSwitching;
    private const bool HasSwitchPermission = true;

    protected override async Task OnInitializedAsync()
    {
        _availableTenants = (await Apiclient.Api.V1.PlatformAdmin.Tenants.GetAsync())?.Tenants;
    }

    private async Task SwitchToTenant(string? tenantId)
    {
        _isSwitching = true;
        StateHasChanged();

        await UserStateContainer.SetLastSelectedTenantAsync(tenantId);

        _isSwitching = false;
        StateHasChanged();
    }
}
