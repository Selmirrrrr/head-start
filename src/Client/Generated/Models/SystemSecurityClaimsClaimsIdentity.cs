// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace HeadStart.Client.Generated.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SystemSecurityClaimsClaimsIdentity : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The actor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaimsIdentity? Actor { get; set; }
#nullable restore
#else
        public global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaimsIdentity Actor { get; set; }
#endif
        /// <summary>The authenticationType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthenticationType { get; set; }
#nullable restore
#else
        public string AuthenticationType { get; set; }
#endif
        /// <summary>The bootstrapContext property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? BootstrapContext { get; set; }
#nullable restore
#else
        public UntypedNode BootstrapContext { get; set; }
#endif
        /// <summary>The claims property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaim>? Claims { get; set; }
#nullable restore
#else
        public List<global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaim> Claims { get; set; }
#endif
        /// <summary>The isAuthenticated property</summary>
        public bool? IsAuthenticated { get; set; }
        /// <summary>The label property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Label { get; set; }
#nullable restore
#else
        public string Label { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The nameClaimType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameClaimType { get; set; }
#nullable restore
#else
        public string NameClaimType { get; set; }
#endif
        /// <summary>The roleClaimType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoleClaimType { get; set; }
#nullable restore
#else
        public string RoleClaimType { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaimsIdentity"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaimsIdentity CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaimsIdentity();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actor", n => { Actor = n.GetObjectValue<global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaimsIdentity>(global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaimsIdentity.CreateFromDiscriminatorValue); } },
                { "authenticationType", n => { AuthenticationType = n.GetStringValue(); } },
                { "bootstrapContext", n => { BootstrapContext = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "claims", n => { Claims = n.GetCollectionOfObjectValues<global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaim>(global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaim.CreateFromDiscriminatorValue)?.AsList(); } },
                { "isAuthenticated", n => { IsAuthenticated = n.GetBoolValue(); } },
                { "label", n => { Label = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "nameClaimType", n => { NameClaimType = n.GetStringValue(); } },
                { "roleClaimType", n => { RoleClaimType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaimsIdentity>("actor", Actor);
            writer.WriteStringValue("authenticationType", AuthenticationType);
            writer.WriteObjectValue<UntypedNode>("bootstrapContext", BootstrapContext);
            writer.WriteCollectionOfObjectValues<global::HeadStart.Client.Generated.Models.SystemSecurityClaimsClaim>("claims", Claims);
            writer.WriteBoolValue("isAuthenticated", IsAuthenticated);
            writer.WriteStringValue("label", Label);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("nameClaimType", NameClaimType);
            writer.WriteStringValue("roleClaimType", RoleClaimType);
        }
    }
}
#pragma warning restore CS0618
