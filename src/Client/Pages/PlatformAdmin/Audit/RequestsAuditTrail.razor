@page "/platform-admin/audit/request"
@using HeadStart.Client.Generated
@using HeadStart.Client.Generated.Models
@inject ApiClientV1 ApiClient
@inject IStringLocalizer<RequestsAuditTrail> LC

<PageTitle>Requests Audit Trail</PageTitle>

<MudText Typo="Typo.h4" Class="my-4">Requests Audit Trail</MudText>
<MudText Typo="Typo.body2" Class="mb-4 text-gray-600">
    Track all HTTP requests made to the API including user activity, impersonation, and error logs
</MudText>

<MudDataGrid T="HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto"
             ServerData="LoadServerData"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterRow"
             Dense="true"
             Hover="true"
             RowsPerPage="20">
    <Columns>
        <PropertyColumn Property="x => x.DateUtc"
                       Title="Date/Time"
                       Format="yyyy-MM-dd HH:mm:ss"
                       Sortable="true"
                       Filterable="true" />

        <PropertyColumn Property="x => x.RequestMethod"
                       Title="Method"
                       Sortable="true"
                       Filterable="true">
            <CellTemplate>
                @{
                    var color = context.Item.RequestMethod switch
                    {
                        "GET" => Color.Info,
                        "POST" => Color.Success,
                        "PUT" => Color.Warning,
                        "DELETE" => Color.Error,
                        "PATCH" => Color.Warning,
                        _ => Color.Default
                    };
                }
                <MudChip Size="Size.Small" Color="@color">@context.Item.RequestMethod</MudChip>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.RequestPath"
                       Title="Path"
                       Sortable="true"
                       Filterable="true">
            <CellTemplate>
                <MudText Typo="Typo.body2" Class="font-mono text-xs">@TruncatePath(context.Item.RequestPath)</MudText>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.ResponseStatusCode"
                       Title="Status"
                       Sortable="true"
                       Filterable="true">
            <CellTemplate>
                @{
                    var statusCode = context.Item.ResponseStatusCode ?? 0;
                    var color = statusCode switch
                    {
                        >= 200 and < 300 => Color.Success,
                        >= 300 and < 400 => Color.Info,
                        >= 400 and < 500 => Color.Warning,
                        >= 500 => Color.Error,
                        _ => Color.Default
                    };
                }
                <MudChip Size="Size.Small" Color="@color">@statusCode</MudChip>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.UserName"
                       Title="User"
                       Sortable="true"
                       Filterable="true" />

        <PropertyColumn Property="x => x.UserEmail"
                       Title="Email"
                       Sortable="false"
                       Filterable="true">
            <CellTemplate>
                <MudText Typo="Typo.caption">@context.Item.UserEmail</MudText>
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.IsImpersonated"
                       Title="Impersonated"
                       Sortable="false"
                       Filterable="false">
            <CellTemplate>
                @if (context.Item.IsImpersonated == true)
                {
                    <MudIcon Icon="@Icons.Material.Filled.PersonOutline"
                            Color="Color.Warning"
                            Size="Size.Small"
                            Title="@($"Impersonated by {context.Item.ImpersonatedByUserName}")" />
                }
            </CellTemplate>
        </PropertyColumn>

        <PropertyColumn Property="x => x.TenantPath"
                       Title="Tenant"
                       Sortable="false"
                       Filterable="false">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(context.Item.TenantPath))
                {
                    <MudText Typo="Typo.caption">@context.Item.TenantPath</MudText>
                }
            </CellTemplate>
        </PropertyColumn>

        <TemplateColumn Title="Actions" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudTooltip Text="View Details">
                    <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                  Size="Size.Small"
                                  OnClick="@(() => ShowDetails(context.Item))" />
                </MudTooltip>
            </CellTemplate>
        </TemplateColumn>
    </Columns>

    <PagerContent>
        <MudDataGridPager T="HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto"
                         RowsPerPageString="Items per page:" />
    </PagerContent>
</MudDataGrid>

<MudDialog @bind-Visible="_showDetailsDialog" Options="_dialogOptions">
    <DialogContent>
        @if (_selectedItem != null)
        {
            <MudText Typo="Typo.h6" Class="mb-4">Request Details</MudText>

            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle2" Class="font-semibold">Date/Time</MudText>
                    <MudText Typo="Typo.body2">@_selectedItem.DateUtc?.ToString("yyyy-MM-dd HH:mm:ss")</MudText>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle2" Class="font-semibold">Request ID</MudText>
                    <MudText Typo="Typo.body2" Class="font-mono">@_selectedItem.RequestId</MudText>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle2" Class="font-semibold">Method</MudText>
                    <MudText Typo="Typo.body2">@_selectedItem.RequestMethod</MudText>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle2" Class="font-semibold">Status Code</MudText>
                    <MudText Typo="Typo.body2">@_selectedItem.ResponseStatusCode</MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.subtitle2" Class="font-semibold">Request Path</MudText>
                    <MudText Typo="Typo.body2" Class="font-mono">@_selectedItem.RequestPath</MudText>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle2" Class="font-semibold">User</MudText>
                    <MudText Typo="Typo.body2">@_selectedItem.UserName</MudText>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudText Typo="Typo.subtitle2" Class="font-semibold">Email</MudText>
                    <MudText Typo="Typo.body2">@_selectedItem.UserEmail</MudText>
                </MudItem>

                @if (_selectedItem.IsImpersonated == true)
                {
                    <MudItem xs="12">
                        <MudDivider Class="my-2" />
                        <MudAlert Severity="Severity.Warning" Dense="true" Class="my-2">
                            This request was made through impersonation
                        </MudAlert>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.subtitle2" Class="font-semibold">Impersonated By</MudText>
                        <MudText Typo="Typo.body2">@_selectedItem.ImpersonatedByUserName</MudText>
                    </MudItem>

                    <MudItem xs="12" md="6">
                        <MudText Typo="Typo.subtitle2" Class="font-semibold">Impersonator Email</MudText>
                        <MudText Typo="Typo.body2">@_selectedItem.ImpersonatedByUserEmail</MudText>
                    </MudItem>
                }

                @if (!string.IsNullOrEmpty(_selectedItem.TenantPath))
                {
                    <MudItem xs="12">
                        <MudText Typo="Typo.subtitle2" Class="font-semibold">Tenant Path</MudText>
                        <MudText Typo="Typo.body2">@_selectedItem.TenantPath</MudText>
                    </MudItem>
                }
            </MudGrid>

            @if (!string.IsNullOrEmpty(_selectedItem.RequestBody))
            {
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.h6" Class="mb-2">Request Body</MudText>
                <MudPaper Class="pa-2" Elevation="0" Outlined="true">
                    <pre style="max-height: 400px; overflow-y: auto; font-size: 0.75rem;">@FormatJson(_selectedItem.RequestBody)</pre>
                </MudPaper>
            }

            @if (!string.IsNullOrEmpty(_selectedItem.RequestQuery))
            {
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.h6" Class="mb-2">Query Parameters</MudText>
                @foreach (var queryParam in _selectedItem.RequestQuery.TrimStart('?').Split('&', StringSplitOptions.RemoveEmptyEntries))
                {
                    var keyValue = queryParam.Split('=');
                    if (keyValue.Length == 2)
                    {
                        <MudText Typo="Typo.body2">@keyValue[0]: @keyValue[1]</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2">@queryParam</MudText>
                    }
                }
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showDetailsDialog = false)" Color="Color.Primary">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _showDetailsDialog = false;
    private HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto? _selectedItem;

    private readonly DialogOptions _dialogOptions = new()
    {
        MaxWidth = MaxWidth.Large,
        FullWidth = true,
        CloseButton = true
    };

    private async Task<GridData<HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto>> LoadServerData(GridState<HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto> state)
    {
        try
        {
            // Build Gridify filter string from MudDataGrid filter definitions
            var filters = new List<string>();

            foreach (var filterDefinition in state.FilterDefinitions)
            {
                if (filterDefinition.Value != null && !string.IsNullOrWhiteSpace(filterDefinition.Value.ToString()))
                {
                    var propertyName = filterDefinition.Column?.PropertyName;
                    var value = filterDefinition.Value.ToString();

                    // Map MudDataGrid property names to Gridify field names
                    var gridifyField = propertyName switch
                    {
                        nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.RequestMethod) => "requestMethod",
                        nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.RequestPath) => "requestPath",
                        nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.ResponseStatusCode) => "responseStatusCode",
                        nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.UserName) => "userName",
                        nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.UserEmail) => "userEmail",
                        _ => propertyName?.ToLowerInvariant()
                    };

                    if (!string.IsNullOrEmpty(gridifyField))
                    {
                        // Use wildcard search for string fields
                        filters.Add(propertyName is nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.RequestPath)
                            or nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.UserName)
                            or nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.UserEmail)
                            ? $"{gridifyField}=*{value}"
                            : $"{gridifyField}={value}");
                    }
                }
            }

            // Build Gridify sort string
            var sortDefinition = state.SortDefinitions.FirstOrDefault();
            string? orderBy = null;

            if (sortDefinition != null)
            {
                var propertyName = sortDefinition.SortBy;
                var gridifyField = propertyName switch
                {
                    nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.DateUtc) => "dateUtc",
                    nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.RequestMethod) => "requestMethod",
                    nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.RequestPath) => "requestPath",
                    nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.ResponseStatusCode) => "responseStatusCode",
                    nameof(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto.UserName) => "userName",
                    _ => propertyName?.ToLowerInvariant()
                };

                if (!string.IsNullOrEmpty(gridifyField))
                {
                    orderBy = sortDefinition.Descending ? $"{gridifyField} desc" : gridifyField;
                }
            }
            else
            {
                // Default sort by date descending
                orderBy = "dateUtc desc";
            }

            // Make API call
            var response = await ApiClient.Api.V1.PlatformAdmin.Audit.Requests.GetAsync(config =>
            {
                config.QueryParameters.Page = state.Page + 1; // MudDataGrid is 0-indexed, API is 1-indexed
                config.QueryParameters.PageSize = state.PageSize;
                config.QueryParameters.Filter = filters.Any() ? string.Join(",", filters) : null;
                config.QueryParameters.OrderBy = orderBy;
            });

            return new GridData<HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto>
            {
                Items = response?.Data ?? new List<HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto>(),
                TotalItems = response?.TotalCount ?? 0
            };
        }
        catch (Exception ex)
        {
            return new GridData<HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto>
            {
                Items = new List<HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto>(),
                TotalItems = 0
            };
        }
    }

    private void ShowDetails(HeadStartWebAPIFeaturesPlatformAdminAuditGetAuditRequests_AuditRequestDto item)
    {
        _selectedItem = item;
        _showDetailsDialog = true;
    }

    private static string TruncatePath(string? path)
    {
        if (string.IsNullOrEmpty(path)) return string.Empty;
        return path.Length > 50 ? $"{path[..47]}..." : path;
    }

    private static string FormatJson(string? json)
    {
        if (string.IsNullOrEmpty(json)) return string.Empty;

        try
        {
            var jsonDocument = System.Text.Json.JsonDocument.Parse(json);
            return System.Text.Json.JsonSerializer.Serialize(jsonDocument, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            return json;
        }
    }

    private IStringLocalizer<App> _l;
    private ClientAppSettings _appSettings;
    private NavigationManager _navigation;
    private ApiClientV1 _apiClient;
    private IStringLocalizer<RequestsAuditTrail> _lc;
}
